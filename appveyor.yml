environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:

    - PYTHON: "C:\\Python33-x64"
      PYTHON_VERSION: "3.3.x"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4.x"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "64"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  # this installs the appropriate Miniconda (Py2/Py3, 32/64 bit),
  # as well as pip, conda-build, and the binstar CLI
  #- powershell .\\continuous-integration\\appveyor\\install.ps1
  #- "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  # Update conda
  - set "CONDA_ROOT=C:\Miniconda3-x64"
  - set "PATH=%CONDA_ROOT%;%CONDA_ROOT%\Scripts;%CONDA_ROOT%\Library\bin;%PATH%"
  - conda config --set always_yes yes
  - conda update -q conda
  - conda config --set auto_update_conda no
  - conda info
  
build: false

test_script:
  - set "PATH=%CONDA_ROOT%;%CONDA_ROOT%\Scripts;%CONDA_ROOT%\Library\bin;%PATH%"
  - set PATH
  # Create environments
  - conda env create -f deeplearning/environment-windows.yml
  - conda env create -f deeplearning/environment-windows-gpu.yml
  - conda env create -f SVMs/environment-windows.yml
  # Run tests
  - activate deeplearning-labs && conda install nose && nosetests deeplearning
  - activate svm-labs && conda install nose && nosetests SVMs

